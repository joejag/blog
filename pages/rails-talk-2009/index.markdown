---
layout: page
status: publish
published: true
title: Rails Talk 2009
author:
  display_name: Joe Wright
  login: joejag
  email: joe@joejag.com
  url: ''
author_login: joejag
author_email: joe@joejag.com
wordpress_id: 689
wordpress_url: https://www.joejag.com/wp/?page_id=689
date: !binary |-
  MjAwOS0wMy0yMyAyMTo0MDoyNCArMDAwMA==
date_gmt: !binary |-
  MjAwOS0wMy0yMyAyMTo0MDoyNCArMDAwMA==
categories: []
tags: []
comments: []
---
<h3>Intro</h3></p>
<p>Hello Scotland on Rails! I'm Joseph and I'm the technical lead for deargreenplace.org.  I'm going to talk about the technical side of organizing a community effort such as the Glasgow Green Map.</p>
<p>I'd like to take you back to when we started the GreenMap.  <strong>March 2007</strong>.  The EU has just started celebrating it's 50th year as Switzerland accidentally invades Liechtenstein,  Rails has just released version 1.2.3 and 1 year has passed since the 2nd version of the Google Maps API launch.  It was in this climate that web <strong>mashups </strong>were being created left right and centre.  Naturally I wanted to get on the the bandwagon of this new <strong>API friendly Internet</strong>.  At first I played about with Google's API to create little maps of where I'd been on <strong>holiday and where I'd lived</strong>.  Then I talked to Kevin at a local <strong>web developers meetup</strong> and he invited me to put these <strong>skills to good use in the local community</strong>.  He also said something about open source and free beer...</p>
<h3>Mapping APIs in 2007 and the Cork Green Map</h3></p>
<p>At first we were focusing on getting a plain HTML/JavaScript solution up and running so we <strong>started by looking at the different Mappings APIs</strong> available.  The big players at this time were efforts from <strong>Google, Yahoo and Microsoft</strong>.  After Google's original API made massive waves, there wasn't an obvious winner in 2007 as after Googles original JavaScript API (the others were using push systems) the other players had <strong>added JavaScript APIs to match Googles</strong>.  This period of mapping APIs is referred to as "<strong>Red Dot Fever</strong>" </p>
<p>We were worried that the legal situation with online maps could go sour as comments were rife about the API hosts eventually <strong>charging per map transaction</strong>.  So obviously we were keen on avoiding <strong>vendor lockin </strong>at this point, so we tried out a few of the abstraction libraries that were around to allow you to use the same data/logic on the big 3 APIS.  The difficult issue for UK mappers we discovered is the practice of <strong>mapping Postcodes to long/lat</strong> coordinates.  Google at this point offered Geocoding for free on UK postcodes via it's search API.  Google also allowed <strong>overlays </strong>ahead of their competitors which allowed you to annotate their maps.  This coupled with the geocoding made us settle on Google Maps for deargreenplace.org.</p>
<p>At this point we hadn't decided on what backend web technology to use, so we looked around for <strong>fellow open source map efforts</strong>.  The first one we found was the <strong>Cork greenmap</strong>.  They had used the <strong>international greenmap symbols </strong>in order to display lot's of different ecological sites around Cork.  We got in touch with their development team over <strong>Skype and email</strong> and they helped us a lot with the questions we had.  After we built up a relationship they then shared their <strong>PHP codebase</strong>.</p>
<p>We then spent 2 months trying to understand how it all hung together.  By analysing their Javascript model we were able to <strong>get to grips</strong> with a lot of the <strong>features of google maps</strong> and we were given a <strong>database schema</strong> to start from.  However, this codebase had grow organically and was well written but it was over 7,500 lines of code.  The<strong> largeness </strong>of the codebase as well as our <strong>inexperience with the latest PHP libraries</strong> meant that we considered building our own.  We also found out that outside of Dublin, there <strong>aren't any postcodes in Ireland</strong>.  We had wanted our system to work by the user putting in their postcode/street and then we would show them what's nearby.</p>
<p>Around this time there was a lot of noise about <strong>Rails killing Enterprise Java </strong>which seemed to be more than your usual hype.  After <strong>watching the 2 minute rails demonstration</strong> (complete with a liberal sprinkling of 'whoops!') I was hooked and decided to make a <strong>spike using Rails</strong> and a gmap plugin.  This spike went on to become the first version of our green map.</p>
<h3>Our First Version</h3></p>
<p>The first version of the Glasgow Green Map was basically a tech demo for Rails where we played with the <strong>CRUD </strong>features which Rails makes simple.  This allowed us to concentrate on implementing our <strong>business logic and experimenting with the different mappings APIs</strong> for Ruby.  This also provided my first experience of using <strong>Ajax via the Prototype</strong> library.  After getting more familiar with our new toolset and allowing the user to <strong>add/edit points</strong> on a map we decided to do our first launch at just over 200 lines of <strong>ruby code</strong>.</p>
<p>At this point we were storing our data in <strong>a spreadsheet</strong> in our <strong>project tracker</strong>.  In order to extract and use that data for our first launch we had to write a <strong>script to parse the spreadsheet</strong>.  This is now available on our projects <strong>sourcecode repository</strong>.  At the start of the project having the data in a spreadsheet allowed us to <strong>collaborate closely on the datamodel</strong> as we designed it in Excel.  After we were happy with the format and we'd collected the majority of the raw data, we <strong>transitioned </strong>to using the online webapp as the golden source of data.</p>
<p>At this point the website had that wonderful <strong>"designed by a coder"</strong> look and feel along with the out of the box Rails styling.  I found it very hard to convince our group that the functionality was there, but without a logo a project does not exist!  So I added a <strong>logo and a simple gradient background</strong>.  This allowed us to call it version one. </p>
<p>At this point we had a <strong>functioning map</strong> and a spiffy printed map in distribution.  This inevitably led to <strong>a lot of interest</strong> in our project from other developers and designers and <strong>with a larger team comes process</strong>.</p>
<p>We already had a person fulfilling the role of <strong>benevolent dictator</strong> for the project so we had to come up with a culture which would encourage new members to check out the code and <strong>start making commits</strong>.  To do this we adopted <strong>pair programming with all new developers</strong> to walk them though the Rails way and get them working on a new feature which they could <strong>make their own</strong>.</p>
<p>For a lot of new members this meant <strong>installing</strong> Ruby, Rails, svn and a database.  In order to get our users up and running quickly we distributed a <strong>VMWare virtual image of Ubuntu and Windows</strong> of a ready made developer setup for people to use with Virtualization software.  We also created a <strong>wiki</strong> based guide for getting setup with rails on a Mac and Windows for more experienced users. </p>
<p>Once the users were setup and had a feature to work on after learning closely with a regular developer, we realised that a lot of people were <strong>uncomfortable with making changes to an already existing project</strong>.  This also led to <strong>lengthy discussions about technical design</strong> which was mainly based around opinion based on the developers previous design experience.  </p>
<p>These discussions fell into the "What colour should the <strong>bike shed</strong> be" type of discussions.  The point of that analogy being that it doesn't really matter what colour the bike shed is, we should stop <strong>procrastinating </strong>and paint it.</p>
<p>This led us to decide that we would <strong>allow any developer to do what they wanted</strong>.  There would be no competing technical discussion on how they plan to implement it.  Whoever has the desire to implement a feature can decide how it would be completed.  This openness allowed us to <strong>quickly get new developers on board </strong>and make them feel like they could make <strong>effective contributions</strong>.</p>
<h3>Work with desirable tools</h3></p>
<p>It is only recently that we've had <strong>other Rails developers</strong> coming to the project.  Originally it was <strong>Java and PHP developers</strong> that came along and we've found that Rails has a great balance between the <strong>freedom and quick feedback of PHP</strong> and the <strong>best practices</strong> seen within other frameworks.  Applied to these features are the benefits of <strong>DRY and Convention over Configuration</strong> which make Rails a good choice for <strong>multi-developer</strong> projects.</p>
<p>Having come from an extreme programming background we were keen to <strong>adopt XPlanner</strong> to manage our development efforts.  XPlanner is a Java based webapp that allows you to manage iterations with stories and tasks.  It also allows you to manage the time it took to achieve a task and to provide estimates.  Unfortunately the Java version of XPlanner <strong>hasn't been actively developed</strong> since around the same time our project started and nothing has quite filled that hole for me.  Apparently there is a <strong>Rails rewrite</strong> in progress though.</p>
<p>It's in all software engineers best interest to <strong>review their toolset frequently</strong> to ensure they are being as productive as possible.  Developers are extremely tolerant of poor software.  It often manifests itself into a situation akin to a <strong>cobbler's children</strong> not having any shoes.</p>
<p>After exposing our non developer colleagues to XPlanner we discovered that the <strong>usability of XPlanner</strong> and the task model from a <strong>normal web users point of view</strong> doesn't work.  We held 2 workshops on educating users on usage, but we realised it was a losing battle.  This made us look about at the market for other agile estimation tools.  We couldn't find one that worked for our users until we had a trial of the original Rails project <strong>Basecamp</strong>.  Basecamp allows you to manage to do lists which we found to work effectively in <strong>collaboration </strong>with <strong>Google Code</strong> hosting.  It's not quite the all encompassing agile tool we wanted but it does allow us to have an <strong>attractive area for discussions and retaining new members</strong>.  Google code provides us with the functional area for development discussion.</p>
<p>One of the things we did to help people feel part of the team is to <strong>take a photo</strong> of them and sign them up on our basecamp account.  This created a sense of <strong>belonging </strong>and allowed people to see each others <strong>progress</strong>.  As the Green map is a project done in peoples spare time it was interesting to see that different developers were <strong>active at wildly different times</strong>.  Being able to post on Basecamp about their latest change works well as receiving <strong>post commit emails</strong> it's read by <strong>both </strong>the technical and non technical members.</p>
<p>Due to this different active times we found Google Code very beneficial as it allows developers to request a <strong>code review and raise bugs</strong>.  Although we had quite a few willing sysadmins available, we didn't want to have the burden of running our own mailing lists, bug tracker and subversion repository so it was an easy decision for us to host our code on Google Code.  There are quite a few project <strong>hosting projects</strong> now such as <strong>GitHub </strong>or if you fancy being in <strong>control </strong>of your own hosting you can use a product like <strong>Redmine</strong>.</p>
<h3>Environments</h3></p>
<p>At the time of our initial launch we were offered <strong>free hosting at the CCA</strong>.  In order to make use of this we bought a <strong>cheap machine</strong> and got hooked up to their network.  However, every day we had the classic case of the server being unplugged and <strong>switched off</strong> by various different people.  This led us to search for other options.  We decided that it was likely that we would be hosting many different applications so we'd like <strong>full control</strong> of the server.  This led us to purchase a <strong>VPS </strong>server.</p>
<p>We didn't want to have<strong> lot's of people accessing</strong> our server, but we did want <strong>new developers</strong> to be able to make changes and show people them <strong>quickly</strong>.  To facilitate this we added a <strong>cron task</strong> that would do an svn update every 30 minutes which would then be deployed to a development instance of the greenmap.  This proved very popular and meant we <strong>didn't have to teach everyone</strong> how to manually ssh and perform the same task.</p>
<p>For our <strong>production releases</strong> we started off by <strong>manually </strong>doing them and creating guides of steps.  We then discovered the <strong>Capistrano and Webistrano</strong> projects.  These are frameworks designed to automate tasks and allow for better auditing around releases.  We've only recently migrated to these frameworks, but it seems to have made what <strong>was a chore</strong> into something that's <strong>fun</strong>.  The <strong>creator </strong>of Webinstrano is doing a talk on "Advanced Deployment" tomorrow morning if anyone is interested in learning more about Rails deployment.</p>
<h3>Embrace Change</h3></p>
<p>A perpetual problem for anyone doing location based services without GPS is <strong>mapping postcodes to longitude and latitude coordinates</strong>.  Originally when we started Google provided these through their <strong>core search API</strong> but not their Google Maps API.  Eventually Google added Postcode lookup but the <strong>PostOffice intervened</strong> demanding royalties.  This led to Google only providing the location of the post code area like G11, G2 but not to exact postcodes like G11 6XE.  In order to provide a better experience for our users we use Google's service as well as the known points of shops we know about to <strong>triangulate </strong>roughly where the user wants to see.  On the <strong>main Google maps site</strong> you can <strong>still enter your postcode</strong> and get the area, it's just <strong>not available to API users</strong>.</p>
<p>During our development of the green map a lot of <strong>game changing events</strong> have occurred which <strong>radically changed</strong> our development style and how we achieved tasks.  The most profound effect was by the release and meteoric rise of <strong>Javascript libraries</strong> post Prototype.  At the Greenmap we have been using <strong>JQuery </strong>which allowed us to greatly <strong>reduce our JavaScript implementation</strong>.  Along with simplification JQuery also created an <strong>active plugin community</strong>.  A lot of effects have been added which would of previously been implemented in Flash.  We are using a JQuery plugin to highlight areas of an <strong>imagemap </strong>on our frontpage.</p>
<p>We have taken <strong>photographs </strong>of all the organizations on our Greenmap and the recent addition of <strong>Google Streetview</strong> means that we are considering how worthwhile these images are!  Last year Google released the Streetview <strong>API </strong>so it is now possible for us to include Google's images rather than our own.  We will have to see how often Streetview is updated for it's viability</p>
<p>As I mentioned before.  We chose to use Subversion and Google Code at the projects inception as that was what we were used to.  During the course of the project we've seen <strong>Git gain substantial mindshare</strong> along with the launch of <strong>GitHub last year</strong>.  We have considered moving but the lack of a <strong>visual tool</strong> like TortoiseSVN for people unfamiliar with version control has meant that we have remained with Google Code.</p>
<p>Another online mapping project has started at Greemap headquarters in <strong>New York</strong>.  For their implementation they chose to build on top of the PHP CMS <strong>Drupal</strong>.  You can see the advantage of this as you get a <strong>user authentication system for free as well as user friendly editing tools</strong>.  We have been pretty excited about a Rails project called <strong>lovdbyless </strong>which offers you a template Rails implementation which you then take and change to your own needs.  This gives you user <strong>authentication, forums, photo galleries, user dashboards and integration with flickr and youtube</strong>.</p>
<p>In a similar vein, CSS templates have taken off as well.  Projects like <strong>blueprint </strong>give you the standard column layout CSS which you then use to create your own.</p>
<h3>Conclusion</h3></p>
<p>There are just under <strong>2000 </strong>google map based mashups listed on <strong>programmableweb.com</strong> and I'm excited today by the competition between mapping API giants and the maturing <strong>OpenStreetMap</strong> effort.</p>
<p>Over the last year we&rsquo;ve been very lucky with the <strong>calibre of volunteers joining</strong>. We&rsquo;ve had many <strong>great artists, web designers and coders</strong> dropping in and creating valuable additions to the Glasgow Green Map. I&rsquo;ve enjoyed leading the development effort and seeing the recent adoption of new technologies allowing us to perform excellent design effects.</p>
<p>I've just started another project called <strong>Blind Messiah</strong> which allows user created music reviews of albums and gigs.  This is a <strong>localized </strong>project based around Derby and Nottingham.  For getting everything up and running I've used the Greenmap experience as a <strong>blueprint for this new venture</strong>.  We are using <strong>GitHub, Rails with Lovdbyless and Capistrano for deployment as well at RubyMine</strong>.</p>
<p>If you are planning on starting a localized software project, and I do encourage you to do so, then there are certain tools you will need to keep everyone motivated and sharing information.  These are a place to meet in person (CCA).  <strong>A place for online conversation</strong> between non tech and techs (Basecamp) and a place to <strong>develop and review</strong> (GitHub/Google Code).  You will also need an environment in place for people to <strong>quickly see their changes</strong> and allow <strong>controlled deployments</strong> to production.</p>
<p>You will see people of very <strong>different skill sets, backgrounds and need</strong>s and you may only have one chance at getting them hooked onto your project.  If you allow easy <strong>information flow, make it personal, show progress and make things happen quickly</strong> then there's a good chance of that person making a big difference to your project.</p>
<p>Thanks for listening.  Are there any questions?</p>
